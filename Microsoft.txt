// Java program to find length of the longest 
// consecutive 1s in binary reprsentation of 
// a number. 
class MaxConsecutiveOnes 
{ 
	private static int maxConsecutiveOnes(int x) 
	{ 
		// Initialize result 
		int count = 0; 

		// Count the number of iterations to 
		// reach x = 0. 
		while (x!=0) 
		{ 
			// This operation reduces length 
			// of every sequence of 1s by one. 
			x = (x & (x << 1)); 

			count++; 
		} 

		return count; 
	} 

	// Driver code 
	public static void main(String strings[]) 
	{ 
		System.out.println(maxConsecutiveOnes(14)); 
		System.out.println(maxConsecutiveOnes(222)); 
	} 
} 


******************************************************************************************************************************

// Java program to find if there 
// is a subtree with given sum 
import java.util.*; 
class GFG 
{ 

/* A binary tree node has data, 
pointer to left child and a 
pointer to right child */
static class Node 
{ 
	int data; 
	Node left, right; 
} 

static class INT 
{ 
	int v; 
	INT(int a) 
	{ 
		v = a; 
	} 
} 

/* utility that allocates a new 
node with the given data and 
null left and right pointers. */
static Node newnode(int data) 
{ 
	Node node = new Node(); 
	node.data = data; 
	node.left = node.right = null; 
	return (node); 
} 

// function to check if there exist 
// any subtree with given sum 
// cur_sum -. sum of current subtree 
//		 from ptr as root 
// sum_left -. sum of left subtree 
//			 from ptr as root 
// sum_right -. sum of right subtree 
//			 from ptr as root 
static boolean sumSubtreeUtil(Node ptr, 
							INT cur_sum, 
							int sum) 
{ 
	// base condition 
	if (ptr == null) 
	{ 
		cur_sum = new INT(0); 
		return false; 
	} 

	// Here first we go to left 
	// sub-tree, then right subtree 
	// then first we calculate sum 
	// of all nodes of subtree having 
	// ptr as root and assign it as 
	// cur_sum. (cur_sum = sum_left + 
	// sum_right + ptr.data) after that 
	// we check if cur_sum == sum 
	INT sum_left = new INT(0), 
		sum_right = new INT(0); 
	return (sumSubtreeUtil(ptr.left, sum_left, sum) || 
			sumSubtreeUtil(ptr.right, sum_right, sum) || 
		((cur_sum.v = sum_left.v + 
					sum_right.v + ptr.data) == sum)); 
} 

// Wrapper over sumSubtreeUtil() 
static boolean sumSubtree(Node root, int sum) 
{ 
	// Initialize sum of 
	// subtree with root 
	INT cur_sum = new INT( 0); 

	return sumSubtreeUtil(root, cur_sum, sum); 
} 

// Driver Code 
public static void main(String args[]) 
{ 
	Node root = newnode(8); 
	root.left = newnode(5); 
	root.right = newnode(4); 
	root.left.left = newnode(9); 
	root.left.right = newnode(7); 
	root.left.right.left = newnode(1); 
	root.left.right.right = newnode(12); 
	root.left.right.right.right = newnode(2); 
	root.right.right = newnode(11); 
	root.right.right.left = newnode(3); 
	int sum = 22; 

	if (sumSubtree(root, sum)) 
		System.out.println( "Yes"); 
	else
		System.out.println( "No"); 
} 
} 

// This code is contributed 
// by Arnab Kundu 
*********************************************************************************************************************************************************

//Java program to calculate number of times 
//the pattern occurred in given string 
public class GFG 
{ 
	// Returns count of occurrences of "1(0+)1" 
	// int str. 
	static int countPattern(String str) 
	{ 
		int len = str.length(); 
		boolean oneSeen = false; 
		
		int count = 0; // Initialize result 
		for(int i = 0; i < len ; i++) 
		{ 
			char getChar = str.charAt(i); 
			
			// Check if encountered '1' forms a valid 
			// pattern as specified 
			if (getChar == '1' && oneSeen == true){ 
				if (str.charAt(i - 1) == '0') 
					count++; 
			} 

			// if 1 encountered for first time 
			// set oneSeen to 1 
			if(getChar == '1' && oneSeen == false) 
				oneSeen = true; 
			
			// Check if there is any other character 
			// other than '0' or '1'. If so then set 
			// oneSeen to 0 to search again for new 
			// pattern 
			if(getChar != '0' && str.charAt(i) != '1') 
				oneSeen = false; 
			

		} 
		return count; 
	} 

	// Driver program to test above function 
	public static void main(String[] args) 
	{ 
		String str = "100001abc101"; 
		System.out.println(countPattern(str)); 
	} 

} 
// This code is contributed by Sumit Ghosh 
**************************************************************************

class LeadersInArray 
{ 
	/*Java Function to print leaders in an array */
	void printLeaders(int arr[], int size) 
	{ 
		for (int i = 0; i < size; i++) 
		{ 
			int j; 
			for (j = i + 1; j < size; j++) 
			{ 
				if (arr[i] <= arr[j]) 
					break; 
			} 
			if (j == size) // the loop didn't break 
				System.out.print(arr[i] + " "); 
		} 
	} 

	/* Driver program to test above functions */
	public static void main(String[] args) 
	{ 
		LeadersInArray lead = new LeadersInArray(); 
		int arr[] = new int[]{16, 17, 4, 3, 5, 2}; 
		int n = arr.length; 
		lead.printLeaders(arr, n); 
	} 
} 
**********************************************************************************************

// Java Code to sort 2D Matrix 
// according to any Column 
import java.util.*; 
class sort2DMatrixbycolumn { 

	// Function to sort by column 
	public static void sortbyColumn(int arr[][], int col) 
	{ 
		// Using built-in sort function Arrays.sort 
		Arrays.sort(arr, new Comparator<int[]>() { 
			
		@Override			
		// Compare values according to columns 
		public int compare(final int[] entry1, 
							final int[] entry2) { 

			// To sort in descending order revert 
			// the '>' Operator 
			if (entry1[col] > entry2[col]) 
				return 1; 
			else
				return -1; 
		} 
		}); // End of function call sort(). 
	} 
	
	// Driver Code 
	public static void main(String args[]) 
	{ 
		int matrix[][] = { { 39, 27, 11, 42 }, 
						{ 10, 93, 91, 90 }, 
						{ 54, 78, 56, 89 }, 
						{ 24, 64, 20, 65 } }; 
		// Sort this matrix by 3rd Column 
		int col = 3; 
		sortbyColumn(matrix, col - 1); 

		// Display the sorted Matrix 
		for (int i = 0; i < matrix.length; i++) { 
			for (int j = 0; j < matrix[i].length; j++) 
				System.out.print(matrix[i][j] + " "); 
			System.out.println(); 
		} 
	} 
} 
*******************************************************************************************
// Java program to implement run length encoding 

public class RunLength_Encoding { 
	public static void printRLE(String str) 
	{ 
		int n = str.length(); 
		for (int i = 0; i < n; i++) { 

			// Count occurrences of current character 
			int count = 1; 
			while (i < n - 1 && 
				str.charAt(i) == str.charAt(i + 1)) { 
				count++; 
				i++; 
			} 

			// Print character and its count 
			System.out.print(str.charAt(i)); 
			System.out.print(count); 
		} 
	} 

	public static void main(String[] args) 
	{ 
		String str = "wwwwaaadexxxxxxywww"; 
		printRLE(str); 
	} 
} 
*************************************************************************************************************
